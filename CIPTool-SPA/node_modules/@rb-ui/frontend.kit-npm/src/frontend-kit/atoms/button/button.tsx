import * as React from 'react';
import classNames from 'classnames';

import { Icon } from '../icon/icon';

class ButtonProps {
  label: string;
  type?: string;
  isDisabled?: boolean;
  icon?: string;
  buttonAttr?: 'button' | 'submit' | 'reset';
  fixedWidth?: boolean;
  action?: string;
}

/**
 * @name    a-button
 * @type    atom
 * @author Experience One AG
 * @copyright Robert Bosch GmbH
 *
 * @param   {string} label          Label to Display
 * @param   {string} type           Type of Button Definition (Primary, Secondary, Tertiary or Inverted)
 * @param   {boolean} isDisabled    Disable or not the Button
 * @param   {string} icon           Icon to Display
 * @param   {string} buttonAttr     Type of Attribute (button, submit, reset)
 * @param   {boolean} fixedWidth    Fixed or not fixed width
 * @param   {string} action         Name of the action this button should be used for
 *
 * @description
 * representation of buttons
 */

const Button: React.FunctionComponent<ButtonProps> = ({
  type = 'primary',
  isDisabled,
  label,
  icon,
  buttonAttr = 'button',
  fixedWidth,
  action,
}: ButtonProps) => {
  const buttonClass = classNames('a-button', {
    [`a-button--${type}`]: type,
    '-fixed': fixedWidth,
    '-without-icon': label && !icon,
    '-without-label': icon && !label,
  });
  /* eslint-disable react/button-has-type */

  return (
    <button
      type={buttonAttr}
      className={buttonClass}
      disabled={isDisabled}
      data-frok-action={action || null}
    >
      {type !== 'close' ? (
        <>
          {icon && <Icon iconName={icon} className="a-button__icon" titleText="Lorem Ipsum" />}
          {label && <div className="a-button__label">{label}</div>}
        </>
      ) : (
        ''
      )}
    </button>
  );
  /* eslint-enable react/button-has-type */
};

export { Button, ButtonProps };
