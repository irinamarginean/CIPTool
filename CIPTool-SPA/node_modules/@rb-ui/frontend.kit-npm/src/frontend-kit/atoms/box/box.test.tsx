// box.test.tsx
import * as React from 'react';
import { createVariantMap, toJson, shallow } from '../../../tests/globalImports';
import { Box, BoxProps } from './box';
import BoxComponent from './index';
import boxVariants from './box.json';

import ElementWithComponent from '../../ElementWithComponent';

const modalHtml: string = `<div class="a-box--modal" id="frontend-kit-modal-modal-demo">
                <div class="a-box -floating" style="width:50vw;height:50vh">
                  <div
                    style="width:100%;height:100%;display:flex;align-items:center;justify-content:center"
                  >
                    click anywhere to close
                  </div>
                </div>
                </div>`;

const buttonModalHtml: string = `<button
                              type="button"
                              class="a-button a-button--primary -without-icon"
                              data-frok-action="show"
                              >
                              <div class="a-button__label">click here</div>
                              </button>`;

let modalElement: HTMLElement
let modalId: string;

beforeEach(() => {

  document.body.innerHTML = `<div class="frontend-kit-example_modal-box" data-frok-show-modal="modal-demo">
                              ${buttonModalHtml}
                              ${modalHtml}
                            </div>`;
    
  modalElement = document.querySelector('.a-box--modal');
  modalId = document.querySelector(".frontend-kit-example_modal-box").getAttribute('data-frok-show-modal');
                          
});

describe('Box component API should work correctly', () => {
  it('should return element by modal id', () => {
    expect(BoxComponent.findModal(modalId)).toBeDefined();
  });

  it('should display the given dialog', () => { 
    // Given
    new BoxComponent(modalElement as ElementWithComponent);
    expect(modalElement.classList.contains('-show')).toBe(false);
    
    // When
    BoxComponent.showModal(modalId);
    
    // Then
    expect(modalElement.classList.contains('-show')).toBe(true);
  });

  it('should not display the modal. The modal with given id doesn\'t exist', () => { 
    // When
    BoxComponent.showModal(`${modalId}-not-exists`);
    
    // Then
    expect(modalElement.classList.contains('-show')).toBe(false);
  });

  it('should hide the given dialog', () => {
    // Given
    new BoxComponent(modalElement as ElementWithComponent);
    BoxComponent.showModal(modalId);
    expect(modalElement.classList.contains('-show')).toBe(true);
    
    // When
    BoxComponent.hideModal(modalId);
    
    // Then
    expect(modalElement.classList.contains('-show')).toBe(false);
  });
});

// Snapshot tests
describe('Box component should be rendered correctly', () => {
  it('All variants', () => {
    const variantMap: { [key: string]: BoxProps } = createVariantMap<BoxProps>(boxVariants, BoxProps);
    Object.entries(variantMap).forEach(([key, value]) => {
        const icon = shallow(<Box {...value} />);
        expect(toJson(icon)).toMatchSnapshot();
    });
  });
});