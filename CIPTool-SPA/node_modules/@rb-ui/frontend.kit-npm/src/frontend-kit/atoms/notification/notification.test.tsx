// notification.test.tsx
import * as React from 'react';
import { createVariantMap, toJson, shallow } from '../../../tests/globalImports';
import { Notification, NotificationProps } from './notification';
import NotificationComponent from './index';
import notificationVariants from './notification.json';

import ElementWithComponent from '../../ElementWithComponent';

const notificationHtml: string = `<div class="a-notification a-notification--banner -success" id="frontend-kit-notification-banner-example">
                                    <i class="a-ui-icon a-ui-icon--ui-ic-ok" title=""></i>
                                    <div class="a-notification__content">
                                        At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd
                                        gubergren, no sea
                                        <a href="/" target="_self">Link sanctus</a>
                                        est Lorem ipsum dolor sit amet. At vero eos et accusam et justo duo
                                        dolores et ea rebum. Stet clita kasd gubergren, lorem ipsum dolor sit
                                        amet)
                                    </div>
                                    <button type="button" class="a-button a-button--close -without-icon" data-frok-action="close"></button>
                                    </div>`;

const buttonNotificationHtml: string = `<button type="button" class="a-button a-button--primary -without-icon" data-frok-action="show">
                                          <div class="a-button__label">Click here</div>
                                        </button>`;

let notificationElement: HTMLElement
let notificationId: string;

beforeEach(() => {

  document.body.innerHTML = `<div class="frontend-kit-example_banner-notification" data-frok-notification="banner-example">
                              ${buttonNotificationHtml}
                              ${notificationHtml}
                            </div>`;

  notificationElement = document.querySelector('.a-notification--banner');
  notificationId = document.querySelector(".frontend-kit-example_banner-notification").getAttribute('data-frok-notification');

});

describe('Notification component API should work correctly', () => {
  it('should return element by notification id', () => {
    // Given, When, Then
    expect(NotificationComponent.findNotification(notificationId)).toBeDefined();
  });

  it('should display a notification', () => {
    // Given
    new NotificationComponent(notificationElement as ElementWithComponent);
    expect(notificationElement.classList.contains('-show')).toBe(false);
    
    // When
    NotificationComponent.showNotification(notificationId);
    
    // Then
    expect(notificationElement.classList.contains('-show')).toBe(true);
  });

  it('should not display the modal. The modal with given id doesn\'t exist', () => { 
    // Given, When
    NotificationComponent.showNotification(`${notificationId}-not-exists`);
    
    // Then
    expect(notificationElement.classList.contains('-show')).toBe(false);
  });

  it('should hide the given dialog', () => {
    // Given
    new NotificationComponent(notificationElement as ElementWithComponent);
    NotificationComponent.showNotification(notificationId);
    expect(notificationElement.classList.contains('-show')).toBe(true);
    
    // When
    NotificationComponent.hideNotification(notificationId);
    
    // Then
    expect(notificationElement.classList.contains('-show')).toBe(false);
  });

  it('should hide the dialog if close button clicked', () => {
    // Given
    const notification = new NotificationComponent(notificationElement as ElementWithComponent);
    NotificationComponent.showNotification(notificationId);
    expect(notificationElement.classList.contains('-show')).toBe(true);
    notification.addEventListener('closeClicked', () => notification.hide());
    const closeButton: HTMLButtonElement = document.querySelector('[data-frok-action="close"]');
    
    // When
    closeButton.click();
    
    // Then
    expect(notificationElement.classList.contains('-show')).toBe(false);
  });

  it('should throw exception because the given event is not supported', () => {
    // Given
    const notification = new NotificationComponent(notificationElement as ElementWithComponent);
    try {
      // When
      notification.addEventListener('eventNotSupported', () => notification.hide());
    }
    catch(e) {
      // Then
      const error = e as Error;
      expect(error.message).toContain("Unknown event");
    }
  });
});

// snapshot tests
describe('Notification component should be rendered correctly', () => {
  it('All variants', () => {

    const variantMap: { [key: string]: NotificationProps } = createVariantMap<NotificationProps>(notificationVariants, NotificationProps);
    Object.entries(variantMap).forEach(([key, value]) => {
      const icon = shallow(<Notification {...value} />);
      expect(toJson(icon)).toMatchSnapshot();
    });
  });
});