// dialog.test.tsx
import * as React from 'react';
import { createVariantMap, toJson, shallow } from '../../../tests/globalImports';
import { Dialog, DialogProps } from './dialog';
import dialogVariants from './dialog.json';
import DialogComponent from './index';

import ElementWithComponent from '../../ElementWithComponent';

const dialogHtml: string = `<div class="m-dialog" id="frontend-kit-dialog-modal-dialog">
                              <div class="a-box--modal" id="frontend-kit-modal-modal-for-frontend-kit-dialog-modal-dialog">
                                  <div class="a-box -floating">
                                      <button type="button" class="a-button a-button--close -without-icon" data-frok-action="close"></button>
                                      <div class="m-dialog__content">
                                          <div class="m-dialog__body">
                                              Paragraph Text View standard regular Lorem ipsum dolor sit amet,
                                              consectetur sadipisicing elitr, sed diam nonumy
                                          </div>
                                          <div class="m-dialog__actions">
                                              <button type="button" class="a-button a-button--primary -without-icon" data-frok-action="confirm">
                                                  <div class="a-button__label">confirm</div>
                                              </button>
                                              <button type="button" class="a-button a-button--secondary -without-icon" data-frok-action="cancel">
                                                  <div class="a-button__label">cancel</div>
                                              </button>
                                          </div>
                                      </div>
                                  </div>
                              </div>
                            </div>`;

const buttonDialogHtml: string = `<button type="button" class="a-button a-button--primary -without-icon">
                                    <div class="a-button__label">click here</div>
                                  </button>`;

const boxModalSelector = '.a-box--modal';

let dialogElement: HTMLElement
let dialogId: string;

beforeEach(() => {

  document.body.innerHTML = `<div class="frontend-kit-example_modal-dialog" data-frok-show-dialog="modal-dialog">
                              ${buttonDialogHtml}
                              ${dialogHtml}
                            </div>`;
    
  dialogId = document.querySelector('.frontend-kit-example_modal-dialog').getAttribute('data-frok-show-dialog');
  dialogElement = DialogComponent.findDialog(dialogId);
});

describe('Dialog component API should work correctly', () => {
  it('should return element by dialog id', () => {
    // Given, When, Then
    expect(dialogElement).toBeDefined();
  });

  it('should display a dialog', () => { 
    // Given
    new DialogComponent(dialogElement as ElementWithComponent);
    const boxElement = dialogElement.querySelector(boxModalSelector);
    expect(boxElement.classList.contains('-show')).toBe(false);
    
    // When
    DialogComponent.showDialog(dialogId);
    
    // Then
    expect(boxElement.classList.contains('-show')).toBe(true);
  });

  it('should not display the dialog. The modal with given id doesn\'t exist', () => { 
    // Given
    const boxElement = dialogElement.querySelector(boxModalSelector);
    
    // When
    DialogComponent.showDialog(`${dialogId}-not-exists`);
    
    // Then
    expect(boxElement.classList.contains('-show')).toBe(false);
  });

  it('should hide the given dialog', () => {
    // Given
    new DialogComponent(dialogElement as ElementWithComponent); 
    DialogComponent.showDialog(dialogId);
    const boxElement = dialogElement.querySelector(boxModalSelector);
    expect(boxElement.classList.contains('-show')).toBe(true);
    
    // When
    DialogComponent.hideDialog(dialogId);
    
    // Then
    expect(boxElement.classList.contains('-show')).toBe(false);
  });
});

// Snapshot tests
describe('Dialog component should be rendered correctly', () => {
  it('All variants', () => {

    const variantMap: { [key: string]: DialogProps } = createVariantMap<DialogProps>(dialogVariants, DialogProps);
    Object.entries(variantMap).forEach(([key, value]) => {
        const icon = shallow(<Dialog {...value} />);
        expect(toJson(icon)).toMatchSnapshot();
    });
  });
});